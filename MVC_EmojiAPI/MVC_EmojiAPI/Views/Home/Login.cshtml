@model MVC_EmojiAPI.Models.LoginParameters

@{
    ViewBag.Title = "Welcome to EmojiAPI app! :-)";
}

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("EmojiAPI", "Login", "Home", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse" style="text-align:right">
            <ul class="nav navbar-nav" style="text-align:right">
                <li>@Html.ActionLink("Login", "Login", "Home", new { area ="" }, null)</li>

            </ul>
        </div>
    </div>
</div>

&nbsp;
<p class="lead" style="text-align:left">Please enter Login Credentials Below: </p>
    @if (ViewBag.CredentialsAuthenticated == "Yes")
    {
        Response.Redirect("~/Home/Result?username="+ViewBag.UserDisplayName);
    }
       
@if (ViewBag.CredentialsAuthenticated == "No")
{
    using (Html.BeginForm())
    {
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Username)
                @*@Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Login" class="btn btn-default" />
            </div>
        </div>

        <p class="warning">Invalid Credentials!!</p>

    </div>
                }
            }
            else
            {
                using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Username)
                    @*@Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input id="submit" type="submit" value="Login" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
